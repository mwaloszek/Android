//
// DO NOT EDIT THIS FILE.Generated using AndroidAnnotations 3.3.2.
//  You can create a larger work that contains this file and distribute that work under terms of your choice.
//


package pl.edu.ug.aib.firstApp;

import java.util.HashMap;
import android.content.Context;
import org.springframework.http.HttpAuthentication;
import org.springframework.http.HttpBasicAuthentication;
import org.springframework.http.HttpEntity;
import org.springframework.http.HttpHeaders;
import org.springframework.http.HttpMethod;
import org.springframework.http.converter.json.MappingJackson2HttpMessageConverter;
import org.springframework.web.client.RestTemplate;
import pl.edu.ug.aib.firstApp.data.Person;
import pl.edu.ug.aib.firstApp.data.PhoneBook;

public final class PhoneBookRestClient_
    implements PhoneBookRestClient
{

    private HttpAuthentication authentication;
    private HashMap<String, String> availableCookies;
    private HashMap<String, String> availableHeaders;
    private String rootUrl;
    private RestTemplate restTemplate;

    public PhoneBookRestClient_(Context context) {
        availableCookies = new HashMap<String, String>();
        availableHeaders = new HashMap<String, String>();
        rootUrl = "http://kangur.wzr.pl:8080/api/v2";
        restTemplate = new RestTemplate();
        restTemplate.getMessageConverters().clear();
        restTemplate.getMessageConverters().add(new MappingJackson2HttpMessageConverter());
    }

    @Override
    public void setHttpBasicAuth(String arg0, String arg1) {
        this.authentication = new HttpBasicAuthentication(arg0, arg1);
    }

    @Override
    public void setBearerAuth(final String arg0) {
        this.authentication = new HttpAuthentication() {


            @Override
            public String getHeaderValue() {
                return ("Bearer "+ arg0);
            }

        }
        ;
    }

    @Override
    public void setAuthentication(HttpAuthentication arg0) {
        this.authentication = arg0;
    }

    @Override
    public String getCookie(String arg0) {
        return availableCookies.get(arg0);
    }

    @Override
    public String getHeader(String arg0) {
        return availableHeaders.get(arg0);
    }

    @Override
    public void setCookie(String arg0, String arg1) {
        availableCookies.put(arg0, arg1);
    }

    @Override
    public void setHeader(String arg0, String arg1) {
        availableHeaders.put(arg0, arg1);
    }

    @Override
    public PhoneBook getPhoneBook() {
        {
            HttpHeaders httpHeaders = new HttpHeaders();
            httpHeaders.set("X-DreamFactory-Api-Key", availableHeaders.get("X-DreamFactory-Api-Key"));
            HttpEntity<Object> requestEntity = new HttpEntity<Object>(httpHeaders);
            return restTemplate.exchange(rootUrl.concat("/db/_table/person"), HttpMethod.GET, requestEntity, PhoneBook.class).getBody();
        }
    }

    @Override
    public void addItems(Person person) {
        {
            HttpHeaders httpHeaders = new HttpHeaders();
            httpHeaders.set("X-DreamFactory-Api-Key", availableHeaders.get("X-DreamFactory-Api-Key"));
            HttpEntity<Person> requestEntity = new HttpEntity<Person>(person, httpHeaders);
            restTemplate.exchange(rootUrl.concat("/db/_table/note"), HttpMethod.POST, requestEntity, ((Class<Void> ) null));
        }
    }

}
