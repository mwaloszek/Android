//
// DO NOT EDIT THIS FILE.Generated using AndroidAnnotations 3.3.2.
//  You can create a larger work that contains this file and distribute that work under terms of your choice.
//


package pl.edu.ug.aib.firstApp;

import android.app.Activity;
import android.content.Context;
import android.os.Bundle;
import android.support.v4.app.ActivityCompat;
import android.support.v4.app.Fragment;
import android.view.KeyEvent;
import android.view.View;
import android.view.ViewGroup.LayoutParams;
import android.widget.EditText;
import org.androidannotations.api.SdkVersionHelper;
import org.androidannotations.api.builder.ActivityIntentBuilder;
import org.androidannotations.api.view.HasViews;
import org.androidannotations.api.view.OnViewChangedListener;
import org.androidannotations.api.view.OnViewChangedNotifier;
import pl.edu.ug.aib.firstApp.R.id;
import pl.edu.ug.aib.firstApp.R.layout;

public final class AddTaskView_
    extends AddTaskView
    implements HasViews, OnViewChangedListener
{

    private final OnViewChangedNotifier onViewChangedNotifier_ = new OnViewChangedNotifier();

    @Override
    public void onCreate(Bundle savedInstanceState) {
        OnViewChangedNotifier previousNotifier = OnViewChangedNotifier.replaceNotifier(onViewChangedNotifier_);
        init_(savedInstanceState);
        super.onCreate(savedInstanceState);
        OnViewChangedNotifier.replaceNotifier(previousNotifier);
        setContentView(layout.activity_second);
    }

    private void init_(Bundle savedInstanceState) {
        OnViewChangedNotifier.registerOnViewChangedListener(this);
        if (restBackgroundaddTask == null) {
            restBackgroundaddTask = RestBackgroundAddTask_.getInstance_(this);
        }
        prc = new PhoneBookRestClient_(this);
        AddTaskView_.NonConfigurationInstancesHolder nonConfigurationInstance = ((AddTaskView_.NonConfigurationInstancesHolder) super.getLastCustomNonConfigurationInstance());
        if (nonConfigurationInstance!= null) {
            restBackgroundaddTask = nonConfigurationInstance.restBackgroundaddTask;
            ((RestBackgroundAddTask_) restBackgroundaddTask).rebind(this);
        }
    }

    @Override
    public void setContentView(int layoutResID) {
        super.setContentView(layoutResID);
        onViewChangedNotifier_.notifyViewChanged(this);
    }

    @Override
    public void setContentView(View view, LayoutParams params) {
        super.setContentView(view, params);
        onViewChangedNotifier_.notifyViewChanged(this);
    }

    @Override
    public void setContentView(View view) {
        super.setContentView(view);
        onViewChangedNotifier_.notifyViewChanged(this);
    }

    public static AddTaskView_.IntentBuilder_ intent(Context context) {
        return new AddTaskView_.IntentBuilder_(context);
    }

    public static AddTaskView_.IntentBuilder_ intent(Fragment supportFragment) {
        return new AddTaskView_.IntentBuilder_(supportFragment);
    }

    @Override
    public boolean onKeyDown(int keyCode, KeyEvent event) {
        if (((SdkVersionHelper.getSdkInt()< 5)&&(keyCode == KeyEvent.KEYCODE_BACK))&&(event.getRepeatCount() == 0)) {
            onBackPressed();
        }
        return super.onKeyDown(keyCode, event);
    }

    @Override
    public void onViewChanged(HasViews hasViews) {
        name = ((EditText) hasViews.findViewById(id.name));
        init();
    }

    @Override
    public Object getLastCustomNonConfigurationInstance() {
        AddTaskView_.NonConfigurationInstancesHolder nonConfigurationInstance = ((AddTaskView_.NonConfigurationInstancesHolder) super.getLastCustomNonConfigurationInstance());
        if (nonConfigurationInstance == null) {
            return null;
        }
        return nonConfigurationInstance.superNonConfigurationInstance;
    }

    @Override
    public AddTaskView_.NonConfigurationInstancesHolder onRetainCustomNonConfigurationInstance() {
        AddTaskView_.NonConfigurationInstancesHolder nonConfigurationInstanceState_ = new AddTaskView_.NonConfigurationInstancesHolder();
        nonConfigurationInstanceState_.superNonConfigurationInstance = super.onRetainCustomNonConfigurationInstance();
        nonConfigurationInstanceState_.restBackgroundaddTask = restBackgroundaddTask;
        return nonConfigurationInstanceState_;
    }

    public static class IntentBuilder_
        extends ActivityIntentBuilder<AddTaskView_.IntentBuilder_>
    {

        private Fragment fragmentSupport_;

        public IntentBuilder_(Context context) {
            super(context, AddTaskView_.class);
        }

        public IntentBuilder_(Fragment fragment) {
            super(fragment.getActivity(), AddTaskView_.class);
            fragmentSupport_ = fragment;
        }

        @Override
        public void startForResult(int requestCode) {
            if (fragmentSupport_!= null) {
                fragmentSupport_.startActivityForResult(intent, requestCode);
            } else {
                if (context instanceof Activity) {
                    Activity activity = ((Activity) context);
                    ActivityCompat.startActivityForResult(activity, intent, requestCode, lastOptions);
                } else {
                    context.startActivity(intent);
                }
            }
        }

    }

    private static class NonConfigurationInstancesHolder {

        public RestBackgroundAddTask restBackgroundaddTask;
        public Object superNonConfigurationInstance;

    }

}
